cmdhistory=["1" "'a string'" "\\"a string\\"" "[\\"a\\" \\"cest\\" \\"sd\\"]" "a \= [\\"asda\\" \\"asda\\"]" "(str \\"asda\\" \\"asdasd\\")" "(+)" "(foo \\"asdasd\\")" "(proba)" "(proba )" "(foo \\"sa\\")" "(foo \\"maja\\")" "(foo \\"sad\\")" "(n 1)" "nil?" "(nil? 1)" "(nil? nil)" "(foo \\"1\\")" "(foo nil)" "(\= 1 1)" "(\= 1 5)" "\\n(or (\= 1 2) \:dfsdfs)" "\\n(and \:asfs nil)" "(foo \\"sad\\")" "(foo \\"asdas\\")" "(ispisi_gresku \\"los_argument\\")" "(ispisi_gresku \:los_argument)" "(ispisi_gresku \\"los_argument\\")" "1/5" "2" "8.5" "188/8" "\\"\\\\\\"ljljljl\\\\\\"07\\"" "'jhg'" "{}" "{\:first_name \\"peta\\"\\n \:last_name \\"asda\\"}" "{\\"asdas\\" +}" "{\:name {\:first \\"John\\" \:middle \\"Jacob\\" \:last \\"Jingleheimerschmidt\\"}}" "(get {\:a 0 \:b 1} \:b)" "(foo \\"asa\\")" "\\n(foo \\"asa\\")" "(foo \\"asa\\")" "(get niz \:1)" "(foo \\"a\\")" "\\n(foo \\"a\\")" "(foo \\"a\\")" "  (get [1 2 3] 1)" "\\r\\n\\n(conj [1 3 4 ] 12)" "\\r\\n  (nth '(1 2 3 4 5 ) 2)" "(conj '(1 2 3) 4)" "\#{\\"kurt vonnegut\\" 20 \:icicle}" "(set [3 3 3 4 4])" " (set 1 1 2 2)" "(foo \\"a\\")" "(first [1 2 3 4])" "(or + -)" "((or + - ) 1 2 3)" "  (map inc [1 2 2 2 2 6 7 8])" "(+ (inc 199) (/ 100 (- 7 2)))" "(doc map)" "(doc foo)" "(multi-arity 1 23)" "(multi-arity 1 23 satisfies?)" "(multi-arity 1 23 a)" "(multi-arity as f a)" "(multi-arity 1 2 3)" "(multi-arity 1 )" "(multi-arity \\"a\\" \\"as\\" )" "  (def things \\r\\n    [\\"peta\\" \\"asas\\" \\"asas\\"])\\r\\n  ;spaja elemente\\r\\n  (clojure.string/join \\", \\" things)" "(System/getProperty \\"user.dir\\")" "(read-lines \\"pitanja.txt\\")" "(read-lines \\"C\:/Users/Kristi/test/src/test/pitanja.txt\\")" "(echo-file )" "(echo-file)" "(read-lines \\"C\:/Users/Kristi/test/src/test/pitanja.txt\\")" "(echo-file)" "[line \\"asdas\\" \\"asdas\\" \\"asdas\\"]" "(check-answere question_answere)" "(get question_answere \:1)" "(doseq [line (read-line)] \\r\\n    ;o nam je dati odgovor korisnika\\r\\n    (def o \\r\\n      line))" "(doseq [line (read-line)] \\r\\n    ;o nam je dati odgovor korisnika\\r\\n    (def o \\r\\n      line)\\r\\n    (print o))" "(doseq [line (read-line)] \\r\\n    ;o nam je dati odgovor korisnika\\r\\n    (def o \\r\\n      line))\\r\\n    \\r\\n  ;PROVERAVAMO DA LI JE DATI ODGOVOR TACAN\\r\\n  (if (\= (str o \\"\\") (get question_answere \:1))\\r\\n    \\"correct\\"\\r\\n    \\"incorrect\\")" "(check-answere question_answere)" " (check-answere question_answere)" "(check-answere question_answere)" "aa\\naa" "(check-answere question_answere)" "and" "(def question_answere\\r\\n  {\:1 \\"a\\" \:2 \\"b\\" \:3 \\"a\\" \:4 \\"c\\" \:5 \\"a\\" \:6 \\"a\\" \:7 \\"c\\" \:8 \\"b\\" \:9 \\"a\\" \:10 \\"c\\"})\\r\\n(def score \\r\\n  0)\\r\\n\\r\\n(loop [iteration 0]\\r\\n  (if (\= \\"a\\" (get question_answere iteration))\\r\\n    (println \\"Goodbye\!\\")\\r\\n    (recur (inc iteration))))" "question_answere" "(check-answere question_answere)" "(multi-arity 7 7)" "(multi-arity \\"k\\" \\"kgj\\")" "(x-chop \\"as\\")" "(x-chop \\"asdasd\\" \\"asda\\")" "(check-answere question_answere)" "(def iteration \\n  7)" "(def iteration \\r\\n     7)\\n(let [iteration (str \\"\:\\" iteration)] iteration)\\n(println iteration)" "(def iteration \\r\\n        7)\\r\\n(let [iteration (str \\"\:\\" iteration)] iteration)\\n(get que-ans iteration)" "(def que_ans\\r\\n  {\:1 \\"a\\" \:2 \\"b\\" \:3 \\"a\\" \:4 \\"c\\" \:5 \\"a\\" \:6 \\"a\\" \:7 \\"c\\" \:8 \\"b\\" \:9 \\"a\\" \:10 \\"c\\"})\\n(def iteration \\r\\n           7)\\r\\n(let [iteration (str \\"\:\\" iteration)] iteration)\\r\\n(get que-ans iteration)" "(check-answere question_answere)" "(when (> 5 2)\\n  \\"asdas\\")" "(when (< 5 2)\\r\\n     \\"asdas\\")" "(def iteration \\n  2)\\n(let [iteration (str \\"\:\\" iteration)] iteration)\\n(get {\:1 \\"a\\" \:2 \\"b\\" \:3 \\"c\\"} iteration)" " (get {\:1 \\"a\\" \:2 \\"b\\" \:3 \\"c\\"} \:)" "(get {\:1 \\"a\\" \:2 \\"b\\" \:3 \\"c\\"} \:2)" "(def iteration \\r\\n     2)\\r\\n(let [iteration (str \\"\:\\" iteration)] iteration)\\n(def i \\r\\n    iteration) \\r\\n(get {\:1 \\"a\\" \:2 \\"b\\" \:3 \\"c\\"} i)" "(def i \\n  \:2)\\n(get {\:1 \\"a\\" \:2 \\"b\\" \:3 \\"c\\"} i)" "(check-answere question_answere)" "(def question_answere\\r\\n  {1 \\"a\\" 2 \\"b\\" 3 \\"a\\" 4 \\"c\\" 5 \\"a\\" 6 \\"a\\" 7 \\"c\\" 8 \\"b\\" 9 \\"a\\" 10 \\"c\\"})" "quot" "question_answere" "(check-answere question_answere)" "and" "(check-answere question_answere)" "and" "(check-answere question_answere)" "aa" "(check-answere question_answere)" "and" "(check-answere question_answere)" "and" "(check-answere question_answere)" "(let [score (inc score)] score)" "(check-answere question_answere)" "(check-answere question_answere 0)" "(check-answere question_answere score)" "(check-answere question_answere svore)" "(check-answere question_answere 0)" "(check-answere question_answere score)" "(check-answere question_answere)" "(pov 1)" "(check-answere question_answere)" "(foo [1 2 3 4])" "(foo 5)" "(check-answere question_answere)" "and" "(foo 5 7)" "(check-answere question_answere)" "(read-question)" "\\n(read-question)" "(read-question)" "(check-answere question_answere)" "and" "(pov 4)" "(pov 1)" "(check-answere question_answere)" "(check-answere question_answere 0)" "(check-answere question_answere 0 0)" "(check-answere question_answere)" "(check-answere question_answere 0 0)" "(check-answere question_answere 0)" "and" " (check-answere question_answere 0 0)" "and" " (check-answere question_answere 0 0)" " (check-answere question_answere 0)" " (check-answere question_answere 0 0)" "and" "(check-answere question_answere 0 score)" " (check-answere question_answere 0 score)" "and" "(print real-score)" "(check-answere question_answere 0 s)" "score" "(check-answere question_answere 0 s)" "(read-question)" "(loop-function 0)" "(loo 0)" "(ime 0)" "(promeni 0)" "(rea-que)" "(loop-function 0)" "(rea-que)" "(loop-function 0)" "(loop-function)" "(loop-function 0)" "(loop-function 1)" "(loop-function 0)" "(loop-function 3)" "(loop-function 0)" "(check-answere question_answere 0 s)" "(start \\"Kristina\\" \\"Stanojevic\\")" "(start \\"as\\" \\"sa\\")" "(start \\"kristina\\" \\"stanojevic\\")" "(start \\"asa\\" \\"asdsadfa\\")" "and" "(start)" "(start \\"k\\" \\"j\\")" "(start \\"asdas\\" \\"sdfasdf\\")" "(start \\" asd\\" \\"asd\\")" "(start)" "(start \\"asdas\\" \\"asda\\")" "(start \\"asdas\\" \\"asdas\\")" "(start \\"asdasd\\" \\"asda\\")" "(rand-int 30)" "(rand-int 31)" "(+ 1 (rand-int 30))" "val" "(+ 1 (rand-int 30))" "val" "(+ 1 (rand-int 30))" "val" "(+ 1 (rand-int 30))" "(start \\"asdasd\\" \\"asdasd\\")" "(start \\"asa\\" \\"as\\")" "(start \\"asda\\" \\"asda\\")" "and" "(start \\"as\\" \\"asd\\")" "\\n(start \\"asdasd\\" \\"asdasd\\")" "(start \\"asdasd\\" \\"asdasd\\")" "and" "(start \\"asdasd\\" \\"asdasd\\")" "and" "(start \\"asdasd\\" \\"asdasd\\")" "and" "(start \\"asdasd\\" \\"asdasd\\")" "and" "(start \\"asdasd\\" \\"asdasd\\")" "and" "(start \\"asdasd\\" \\"asdasd\\")" "and" "(start \\"asdasd\\" \\"asdasd\\")" "and" "(start \\"asdasd\\" \\"asdasd\\")" "\\n(start \\"zddf\\" \\"asdas\\")" "(start \\"zddf\\" \\"asdas\\")" "and" "(start \\"asdas\\" \\"asdas\\")" "(start \\"sada\\" \\"asda\\")" "(start \\"asdas\\" \\"asdasd\\")" "and" "(start \\"asda\\" \\"asda\\")" "\\n(start \\"asdas\\" \\"asd\\")" "(start \\"asdas\\"  \\"asdasd\\")" "(start \\"as\\" \\"sa\\")" "(start \\"sad\\" \\"asd\\")" "(start \\"asd\\" \\"as\\")" "(start \\"sadas\\" \\"asd\\")" "(start \\"asda\\" \\"asdas\\")" "(start \\"Kristina\\" \\"Stanojevic\\")" "(start \\"a\\" \\"a\\")" "(start \\"Marija\\" \\"stanojevic\\")" "(start \\"stasd\\" \\"asd\\")" "and" "(start \\"Jelena\\" \\"Tepavcevic\\")" "and" "(take 3 (repeatedly (fn [] (rand-int 10))))" "(every? (1 2 3 4 4))" "(every? (\= (1 2 3) (1 2 3)))" "(def great-baby-name \\"Rosanthony\\")\\r\\ngreat-baby-name\\r\\n\\r\\n(let [great-baby-name \\"Bloodthunder\\"]\\r\\n  great-baby-name)\\r\\n\\r\\n\\r\\ngreat-baby-name" "(ns-name *ns*)" "(start \\"asda\\" \\"asdas\\")" "(start \\"asdasd asda\\")" "(def r [1 2 3 4])\\n(def s r[1])\\ns" "(def r [1 2 3 4])" "(def s r[1])" "(def r [1 2 3 4])\\r\\n(def s (get r 1))\\r\\ns" "(contains-value? 1 [4 1 2 3])" "(contains-value? 34 [4 1 2 3])" "(start \\"Kristina Stanojevic\\")" "(conj random-questions q)" "(check-answere)" "(check-answere [] 0)" "(not-repeat [] 1)" "(not-repeat [1 2 3] 2)" "(contains-value? q random-questions)" "(contains-value? 3 [1 2 2 5 6])" "(not-repeat [1 2 3] 2)" "(not-repeat [1 2 3] 3)" "(not-repeat [1 2 3] 5)" "(start \\"sasd\\")" "(start \\"asd00\\")" "(start \\"asd\\")" "(not-repeat [1 23 4 12] 3)" "(not-repeat [1 23 4 12] 23)" "(not-repeat [1 21 3 12] 3)" "(not-repeat [1 21 3 12] 3 0)" "(let [q (rand-int 30)] q)" "(let [q (rand-int 30)] q)\\r\\n      (not-repeat random-questions q (+ i 1))" "(let [q (rand-int 30)] q)\\r\\n (not-repeat random-questions q (+ 2 1))" "(let [q (rand-int 30)] q)\\r\\n      (not-repeat random-questions q (+ 2 1))" "(defn not-repeat \\r\\n  [random-questions q i]\\r\\n  (let [q (rand-int 30)] q)\\r\\n   (not-repeat random-questions q (+ i 1)))" "(defn not-repeat \\r\\n     [random-questions q i]\\r\\n     (let [q (rand-int 30)] q)\\r\\n      (not-repeat random-questions q (+ i 1)))" " (defn not-repeat \\r\\n        [random-questions q i]\\r\\n        (let [q (rand-int 30)] q)\\r\\n         (not-repeat random-questions q (+ i 1)))\\r\\n\\n(not-repeat [1 2]  0)" "(defn not-repeat \\r\\n           [random-questions q i]\\r\\n           (let [q (rand-int 30)] q)\\r\\n            (not-repeat random-questions q (+ i 1)))\\r\\n   \\r\\n   (not-repeat [1 2] 3 0)" "(not-repeat [1 2 3] 5 0)" " (conj [1 2 3] 1)" "(let [[first-element second-element third-element fourth-element] \\r\\n             [10 20 30 40]] \\r\\n         (str \\"first\=\\" first-element \\" second\=\\" second-element \\r\\n           \\" third\=\\" third-element \\" fourth\=\\" fourth-element))" "(not-repeat [] 0)" "(not-repeay)" "(not-repeat\\n  )" "(not-repeat)" "(start \\"asdasda\\")" "(start \\"krke\\")" "(start \\"asda\\")"]
eclipse.preferences.version=1
